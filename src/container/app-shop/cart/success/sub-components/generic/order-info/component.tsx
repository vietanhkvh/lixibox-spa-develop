import classNames from 'classnames';
import { withRouter } from 'react-router-dom';
import { useNavigate } from 'react-router-dom-v5-compat';

import SubmitButton from 'components/ui/submit-button';
import SvgIcon from 'presentation-component/ui/icon';
import { CDN_ASSETS_PREFIX } from 'utils/uri';
import { CustomCurrencyType, formatCurrency } from 'utils/currency';
import { PAYMENT_METHOD_TITLE, PAYMENT_METHOD_TYPE } from 'constants/application/payment';
import { ORDER_TYPE_VALUE, ORDER_TYPE } from 'constants/application/order';
import { SHIPPING_TYPE } from 'constants/application/shipping';
import { isMobileVersion } from 'utils';
import { generateTestId } from 'utils/test-utils';
import * as ROUTINGS from 'routings/path';
import { Order } from 'types/api/order';
import STYLE from './style';
import style from './style.module.scss';

const orderInfoBackground = CDN_ASSETS_PREFIX('/checkout/done.jpg');

const ThankYouMesssage = withRouter(({ history }) => {
  return (
    <div className={style.thankYouMessage} {...generateTestId({ name: 'thank-you-message' })}>
      <SvgIcon name="tick" className={style.icon} onClick={() => history.push(ROUTINGS.ROUTING_SHOP_INDEX)} />
      <div className={style.title}>ƒê·∫∑t H√†ng Th√†nh C√¥ng</div>
    </div>
  );
});

const OrderDetails = ({
  order: { number, name, phone, address, price, paymentMethod, status, deliveryType },
  copyTextToClipboard,
  onClickOrderTracking,
  onClickPaymentWithMomo
}) => {
  const orderType = ORDER_TYPE_VALUE[status];
  const orderTitle =
    PAYMENT_METHOD_TYPE.COD.id === paymentMethod && status === ORDER_TYPE.UNPAID
      ? 'ƒêang ch·ªù x√°c nh·∫≠n'
      : orderType.title;

  return (
    <div className={style.orderDetails} {...generateTestId({ name: 'order-details', id: number })}>
      <div className={style.title}>Th√¥ng tin ƒë∆°n h√†ng</div>
      <div className={style.details}>
        <table className={style.properties}>
          <tbody>
            <tr className={style.row}>
              <td className={style.key}>M√£ ƒë∆°n h√†ng</td>
              <td className={style.value}>
                <div
                  {...generateTestId({ name: 'code-success-order' })}
                  className={classNames(style.text, style.highlight)}
                >
                  {number}
                </div>
                <SvgIcon name="copy" className={style.copyAction} onClick={() => copyTextToClipboard(number)} />
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>Ng∆∞·ªùi nh·∫≠n</td>
              <td {...generateTestId({ name: 'name-receiver-success-order' })} className={style.value}>
                {name}
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>ƒêi·ªán tho·∫°i</td>
              <td {...generateTestId({ name: 'phone-receiver-success-order' })} className={style.value}>
                {phone}
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>ƒê·ªãa ch·ªâ</td>
              <td {...generateTestId({ name: 'address-receiver-success-order' })} className={style.value}>
                {address}
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>T·ªïng ti·ªÅn</td>
              <td {...generateTestId({ name: 'payment-amount1-success-order' })} className={style.value}>
                {formatCurrency(price, { suffix: true })}
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>Thanh to√°n</td>
              <td {...generateTestId({ name: 'payment_method_success_order' })} className={style.value}>
                {PAYMENT_METHOD_TITLE[paymentMethod]}
              </td>
            </tr>
            <tr className={style.row}>
              <td className={style.key}>Tr·∫°ng th√°i</td>
              <td className={style.value}>
                <div
                  {...generateTestId({ name: 'status_success_order' })}
                  className={classNames(style.label, style[`label-${orderType.colorType}`])}
                >
                  {orderTitle}
                </div>
              </td>
            </tr>
          </tbody>
        </table>
        <div className={style.notes}>
          {status === ORDER_TYPE.PAID && (
            <div className={style.note}>
              LIXIBOX s·∫Ω th√¥ng b√°o v·ªÅ t√¨nh tr·∫°ng ƒë∆°n h√†ng trong v√≤ng 24 ti·∫øng n·ªØa qua email c·ªßa b·∫°n.
            </div>
          )}
          {status === ORDER_TYPE.PAYMENT_PENDING && (
            <div className={style.note}>
              B·∫°n ƒë√£ ƒë·∫∑t h√†ng th√†nh c√¥ng. Lixibox ƒëang ch·ªù ng√¢n h√†ng x√°c th·ª±c thanh to√°n.
            </div>
          )}

          {deliveryType !== SHIPPING_TYPE.USER_PICKUP && (
            <div className={style.note}>
              Vui l√≤ng x√°c nh·∫≠n th√¥ng tin c√° nh√¢n (th√¥ng qua CMND, gi·∫•y ph√©p l√°i xe,‚Ä¶) v√† ƒë·ªìng ki·ªÉm v·ªõi shipper tr∆∞·ªõc
              khi nh·∫≠n h√†ng. M·ªçi khi·∫øu n·∫°i sau khi kh√°ch k√Ω nh·∫≠n s·∫Ω kh√¥ng ƒë∆∞·ª£c gi·∫£i quy·∫øt.
            </div>
          )}
        </div>
      </div>
      <div className={style.actions}>
        {paymentMethod === PAYMENT_METHOD_TYPE.MOMO.id && status === ORDER_TYPE.UNPAID && (
          <SubmitButton
            style={Object.assign({}, STYLE.button, STYLE.buttonMomo)}
            titleStyle={STYLE.button.titleStyle}
            title="Thanh to√°n b·∫±ng v√≠ MoMo"
            icon="color-momo"
            onSubmit={() => onClickPaymentWithMomo()}
          />
        )}
        <SubmitButton
          style={Object.assign({}, STYLE.button, STYLE.buttonTrack)}
          titleStyle={STYLE.button.titleStyle}
          title="Theo d√µi ƒë∆°n h√†ng"
          onSubmit={() => onClickOrderTracking(number)}
        />
      </div>
    </div>
  );
};

interface AccumulationsFromOrderProps {
  order: Order | null;
  classes?: { container?: string; accumulations?: string };
}
const AccumulationsFromOrder = ({ order, classes }: AccumulationsFromOrderProps) => {
  const navigate = useNavigate();

  const lixicoinAccumulation = order?.lixicoin_bonus;
  const cashbackAccumulation = order?.cashback?.bonus;

  return (
    (!!lixicoinAccumulation || !!cashbackAccumulation) && (
      <div className={classNames(style.accumulationsFromOrder, classes?.container)}>
        <div className={style.header}>üéâ B·∫°n nh·∫≠n ƒë∆∞·ª£c:</div>
        <div className={classNames(style.accumulations, classes?.accumulations)}>
          {!!lixicoinAccumulation && (
            <div className={style.accumulation}>
              <div className={style.title} onClick={() => navigate(ROUTINGS.ROUTING_LIXI_COIN)}>
                Lixicoin
              </div>
              <SvgIcon name="info" className={style.icon} onClick={() => navigate(ROUTINGS.ROUTING_LIXI_COIN)} />
              <div className={style.value}>
                +{formatCurrency(lixicoinAccumulation, { suffix: CustomCurrencyType.LIXICOIN })}
              </div>
            </div>
          )}
          {!!cashbackAccumulation && (
            <div className={style.accumulation}>
              <div className={style.title} onClick={() => navigate(ROUTINGS.ROUTING_BALANCE)}>
                Ho√†n ti·ªÅn
              </div>
              <SvgIcon name="info" className={style.icon} onClick={() => navigate(ROUTINGS.ROUTING_BALANCE)} />
              <div className={style.value}>+{formatCurrency(cashbackAccumulation, { suffix: true })}</div>
            </div>
          )}
        </div>
      </div>
    )
  );
};

interface OrderInfoBlockProps {
  cartStore: any;
  copyTextToClipboard: (text: string) => any;
  onClickOrderTracking: (orderNumber: string) => any;
  onClickPaymentWithMomo: () => any;
}
const OrderInfo = ({
  cartStore: {
    orderInfo,
    orderInfo: {
      number,
      first_name,
      last_name,
      full_address,
      payment_method,
      total_price,
      phone,
      status,
      shipping_method
    }
  },
  copyTextToClipboard,
  onClickOrderTracking,
  onClickPaymentWithMomo
}: OrderInfoBlockProps) => {
  return (
    <div
      className={classNames(style.orderInfoBlock, !isMobileVersion() && style.orderInfoBlockDesktop)}
      style={Object.assign({}, !isMobileVersion() && { backgroundImage: `url(${orderInfoBackground})` })}
      {...generateTestId({ name: 'order-info' })}
    >
      <ThankYouMesssage />
      <AccumulationsFromOrder order={orderInfo} classes={{ container: style.accumulationsFromOrderBlock }} />
      {!!Object.keys(orderInfo).length && (
        <OrderDetails
          order={{
            number,
            name: `${first_name} ${last_name}`,
            phone,
            address: full_address,
            price: total_price,
            paymentMethod: payment_method,
            status,
            deliveryType: shipping_method
          }}
          copyTextToClipboard={copyTextToClipboard}
          onClickOrderTracking={onClickOrderTracking}
          onClickPaymentWithMomo={onClickPaymentWithMomo}
        />
      )}
      {/* TODO: Refactor into ::before or backdrop-filter */}
      <div className={style.overlay} style={{ backgroundImage: `url(${orderInfoBackground})` }} />
    </div>
  );
};

export default OrderInfo;
